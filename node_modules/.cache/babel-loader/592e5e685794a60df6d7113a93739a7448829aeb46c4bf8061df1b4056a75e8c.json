{"ast":null,"code":"var _jsxFileName = \"/Users/weichinglim/Desktop/gym_exercises/src/components/HorizontalScrollbar.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, {useContext} from 'react';\n// import { Box, Typography } from '@mui/material';\n// import { ScrollMenu, VisibilityContext } from 'react-horizontal-scrolling-menu';\n\n// import BodyPart from './BodyPart'; // Render this inside HorizontalScrollbar\n// import LeftArrowIcon from '../assets/icons/left-arrow.png';\n// import RightArrowIcon from '../assets/icons/right-arrow.png';\n\n// const LeftArrow = () => {\n//     const {scrollPrev} = useContext(VisibilityContext);\n\n//     return (\n//         <Typography onClick={() => scrollPrev()} className='right-arrow' >\n//             <img src={LeftArrowIcon} alt='left-arrow' />\n//         </Typography>\n//     );\n// };\n\n// const RightArrow = () => {\n//     const {scrollNext} = useContext(VisibilityContext);\n\n//     return (\n//         <Typography onClick={() => scrollNext()} className='left-arrow' >\n//             <img src={RightArrowIcon} alt='right-arrow' />\n//         </Typography>\n//     );\n// };\n\n// const HorizontalScrollbar = ({data, bodyPart, setBodyPart}) => {\n//   return (\n//     <ScrollMenu LeftArrow={LeftArrow} RightArrow={RightArrow} >\n//         {data.map((item) => (\n//                 <Box\n//                     key={item.id || item}\n//                     itemId={item.id || item}\n//                     title={item.id || item}\n//                     m='0 40px'\n//                 >\n//                     {/* {item} Now items are listed. (5) Create a BodyPart.js component to display in cards. Render it below */}\n//                     <BodyPart item={item} bodyPart={bodyPart} setBodyPart={setBodyPart} />\n//                 </Box>\n//             )\n//         )}\n//     </ScrollMenu>\n//   )\n// }\n\n// export default HorizontalScrollbar\n\nimport React, { useContext } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport BodyPartCard from './BodyPartCard';\nimport { ScrollMenu, VisibilityContext } from 'react-horizontal-scrolling-menu';\nimport 'react-horizontal-scrolling-menu/dist/styles.css';\nimport RightArrowIcon from '../assets/icons/right-arrow.png';\nimport LeftArrowIcon from '../assets/icons/left-arrow.png';\nimport ExerciseCard from './ExerciseCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LeftArrow = () => {\n  _s();\n  const {\n    scrollPrev,\n    isFirstItemVisible\n  } = useContext(VisibilityContext);\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    disabled: isFirstItemVisible,\n    onClick: () => scrollPrev(),\n    className: \"right-arrow\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: LeftArrowIcon,\n      alt: \"left-arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(LeftArrow, \"8ZbmnpQ1FGaXe0aaADmOJ3k8Ss4=\");\n_c = LeftArrow;\nconst RightArrow = () => {\n  _s2();\n  const {\n    isLastItemVisible,\n    scrollNext\n  } = useContext(VisibilityContext);\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    disabled: isLastItemVisible,\n    onClick: () => scrollNext(),\n    className: \"left-arrow\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: RightArrowIcon,\n      alt: \"right-arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s2(RightArrow, \"F/wm/0gG0EqvotRFx60gSLDQ574=\");\n_c2 = RightArrow;\nconst HorizontalScrollBar = ({\n  data,\n  bodyPart,\n  setBodyPart,\n  isBodyParts\n}) => {\n  const styleToApply = isBodyParts ? {\n    width: '100%'\n  } : {\n    width: '100%'\n  };\n  return /*#__PURE__*/_jsxDEV(ScrollMenu, {\n    LeftArrow: LeftArrow,\n    RightArrow: RightArrow,\n    children: data.map(item => {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        itemID: item.id || item,\n        title: item.id || item,\n        m: \"0 0px\",\n        sx: styleToApply,\n        children: isBodyParts ? /*#__PURE__*/_jsxDEV(BodyPartCard, {\n          item: item,\n          bodyPart: bodyPart,\n          setBodyPart: setBodyPart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(ExerciseCard, {\n          exercise: item,\n          hsb: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 16\n        }, this)\n      }, item.id || item, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_c3 = HorizontalScrollBar;\nexport default HorizontalScrollBar;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LeftArrow\");\n$RefreshReg$(_c2, \"RightArrow\");\n$RefreshReg$(_c3, \"HorizontalScrollBar\");","map":{"version":3,"names":["React","useContext","Box","Typography","BodyPartCard","ScrollMenu","VisibilityContext","RightArrowIcon","LeftArrowIcon","ExerciseCard","jsxDEV","_jsxDEV","LeftArrow","_s","scrollPrev","isFirstItemVisible","disabled","onClick","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","RightArrow","_s2","isLastItemVisible","scrollNext","_c2","HorizontalScrollBar","data","bodyPart","setBodyPart","isBodyParts","styleToApply","width","map","item","itemID","id","title","m","sx","exercise","hsb","_c3","$RefreshReg$"],"sources":["/Users/weichinglim/Desktop/gym_exercises/src/components/HorizontalScrollbar.js"],"sourcesContent":["// import React, {useContext} from 'react';\n// import { Box, Typography } from '@mui/material';\n// import { ScrollMenu, VisibilityContext } from 'react-horizontal-scrolling-menu';\n\n// import BodyPart from './BodyPart'; // Render this inside HorizontalScrollbar\n// import LeftArrowIcon from '../assets/icons/left-arrow.png';\n// import RightArrowIcon from '../assets/icons/right-arrow.png';\n\n// const LeftArrow = () => {\n//     const {scrollPrev} = useContext(VisibilityContext);\n    \n//     return (\n//         <Typography onClick={() => scrollPrev()} className='right-arrow' >\n//             <img src={LeftArrowIcon} alt='left-arrow' />\n//         </Typography>\n//     );\n// };\n\n// const RightArrow = () => {\n//     const {scrollNext} = useContext(VisibilityContext);\n\n//     return (\n//         <Typography onClick={() => scrollNext()} className='left-arrow' >\n//             <img src={RightArrowIcon} alt='right-arrow' />\n//         </Typography>\n//     );\n// };\n\n// const HorizontalScrollbar = ({data, bodyPart, setBodyPart}) => {\n//   return (\n//     <ScrollMenu LeftArrow={LeftArrow} RightArrow={RightArrow} >\n//         {data.map((item) => (\n//                 <Box\n//                     key={item.id || item}\n//                     itemId={item.id || item}\n//                     title={item.id || item}\n//                     m='0 40px'\n//                 >\n//                     {/* {item} Now items are listed. (5) Create a BodyPart.js component to display in cards. Render it below */}\n//                     <BodyPart item={item} bodyPart={bodyPart} setBodyPart={setBodyPart} />\n//                 </Box>\n//             )\n//         )}\n//     </ScrollMenu>\n//   )\n// }\n\n// export default HorizontalScrollbar\n\nimport React,{useContext} from 'react'\nimport {Box,Typography} from '@mui/material'\nimport BodyPartCard from './BodyPartCard';  \nimport {ScrollMenu, VisibilityContext} from 'react-horizontal-scrolling-menu';\nimport 'react-horizontal-scrolling-menu/dist/styles.css';\nimport RightArrowIcon from '../assets/icons/right-arrow.png';\nimport LeftArrowIcon from '../assets/icons/left-arrow.png';\nimport ExerciseCard from './ExerciseCard';\n\nconst LeftArrow = () => {\n    const { scrollPrev, isFirstItemVisible } = useContext(VisibilityContext);\n\n    return (\n        <Typography disabled={isFirstItemVisible} onClick={() => scrollPrev()} className=\"right-arrow\">\n            <img src={LeftArrowIcon} alt=\"left-arrow\" />\n        </Typography>\n    );\n};\n\nconst RightArrow = () => {\n    const { isLastItemVisible, scrollNext } = useContext(VisibilityContext);\n\n    return (\n        <Typography disabled={isLastItemVisible} onClick={() => scrollNext()} className=\"left-arrow\">\n            <img src={RightArrowIcon} alt=\"right-arrow\" />\n        </Typography>\n    );\n};\n\nconst HorizontalScrollBar = ({ data, bodyPart, setBodyPart,isBodyParts }) => {\n  \n  const styleToApply = isBodyParts ? { width: '100%'} : {width :'100%'};\n\n  return (\n    <ScrollMenu LeftArrow={LeftArrow} RightArrow={RightArrow}>\n        {data.map((item) => {\n          return (<Box \n             key ={item.id || item}\n             itemID={item.id || item}\n             title ={item.id || item}\n             m=\"0 0px\" \n             sx={styleToApply}            \n            >\n              { isBodyParts ? <BodyPartCard item={item} bodyPart={bodyPart} setBodyPart ={setBodyPart} />\n             : <ExerciseCard exercise={item} hsb/>}\n           </Box>) \n        })}\n    </ScrollMenu>\n  )\n}\n\nexport default HorizontalScrollBar"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}